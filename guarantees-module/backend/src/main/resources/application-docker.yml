spring:
  application:
    name: guarantees-module-docker
  
  profiles:
    active: cqrs
  
  # Command Database (Write Side) - Primary
  datasource:
    url: ${COMMAND_DB_URL:jdbc:mysql://mysql-command:3306/guarantees_command_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${COMMAND_DB_USERNAME:guarantees_command_user}
    password: ${COMMAND_DB_PASSWORD:guarantees_command_pass}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        jdbc:
          time_zone: UTC
          
  # Query Database (Read Side) - Secondary
  datasource:
    query:
      url: ${QUERY_DB_URL:jdbc:mysql://mysql-query:3306/guarantees_query_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true}
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: ${QUERY_DB_USERNAME:guarantees_query_user}
      password: ${QUERY_DB_PASSWORD:guarantees_query_pass}
      hikari:
        maximum-pool-size: 50
        minimum-idle: 10
        idle-timeout: 300000
        connection-timeout: 20000

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:29092}
    consumer:
      group-id: guarantees-cqrs-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 10
      properties:
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
        spring.json.trusted.packages: "com.interexport.guarantees.*,java.util.*"
    producer:
      acks: all
      retries: 3
      properties:
        retry.backoff.ms: 1000
        enable.idempotence: true
        max.in.flight.requests.per.connection: 1
        batch.size: 16384
        linger.ms: 50
        buffer.memory: 33554432

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:redispassword}
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 2000ms
          
  session:
    store-type: redis
    redis:
      namespace: guarantees:session
      flush-mode: on_save
      
  cache:
    type: redis
    redis:
      time-to-live: 1800000  # 30 minutes
      cache-null-values: false
      enable-statistics: true

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${API_CONTEXT_PATH:/api/v1}

# Logging Configuration
logging:
  level:
    com.interexport.guarantees: ${LOG_LEVEL:INFO}
    org.springframework.kafka: INFO
    org.apache.kafka: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE_PATH:/app/logs/application.log}

# Management/Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  health:
    redis:
      enabled: true
    db:
      enabled: true

# CQRS Configuration
cqrs:
  command:
    database: command
  query:
    database: query
  events:
    topics:
      guarantee-created: guarantee-created
      guarantee-updated: guarantee-updated
      guarantee-approved: guarantee-approved
      claim-submitted: claim-submitted
      amendment-created: amendment-created
    partitions: ${CQRS_EVENTS_PARTITIONS:3}
    replication-factor: ${CQRS_EVENTS_REPLICATION_FACTOR:1}
